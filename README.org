* Introduction

We designed a set of pool split experiments that used a set of
parallel pool-split experiments to estimate the technical noise
generated by using such low input material.

Our statistician Ken McCue designed some more statistically useful
techniques to examine the quality of the experiments.

See [[./public-procedure.pdf][public-procedure.pdf]] for the statistical theory.

* Spikein concentration

The following techniques depend on low concentration spike ins.

An example file singleqc/gspikein.txt is provided that corresponds to [[https://www.encodeproject.org/references/ENCSR133ALU/][ENCSR133ALU]]

* tube_likelihood

The tube likelihood program calculates the most likely P_{smc}
(probability of small molecule capture).

It will always compute the probabilities of one run versus the other
runs, if you provide both pool and single cell sets it will also
compute the the probabilities of all the pool-split experiment versus
all the single-cell experiments.

The run name will either be the run name for specific runs versus all the others,
or "pool_v_single" for the pool-splits vs single-cells.

The suffixes:

  - "run" is a specific run or the pool-split runs,
  - "non_run" is  of the other runs or the single cell runs.
  - "tot" is all of the runs provided to the program.

The prefixes:

  - "like" is the best log likelihood
  - "psmc" is the Psmc with the highest likelihood.

** Merged file available

To run assuming you have a combined quantification file with genes as
rows by the quantification metric for each library of interest by
column you can use the merged file

#+BEGIN_SRC bash
python3 tube_likelihood.py --combined-pool poolsplit_FPKM.csv \
                           --combined-single single_FPKM.csv 
                           -c gspikein.txt --sep , 
                           -o likelihood.tsv
#+END_SRC

** From RSEM quantification files

-p or --pool for pool libraries, and -s or --single cell libraries.

#+BEGIN_SRC bash
python3 tube_likelihood.py -c gspikein.txt -o tube_test.tsv \
        -p 15288/*.genes.results -p 15289/*.genes.results -p 15290/*.genes.results -p 15291/*.genes.results \
        -p 15292/*.genes.results -p 15293/*.genes.results -p 15294/*.genes.results -p 15295/*.genes.results \
        -p 15296/*.genes.results -p 15297/*.genes.results -p 15298/*.genes.results -p 15299/*.genes.results \
        -p 15300/*.genes.results -p 15301/*.genes.results -p 15302/*.genes.results -p 15303/*.genes.results \
        -s 15256/*.genes.results -s 15257/*.genes.results -s 15258/*.genes.results -s 15259/*.genes.results \
        -s 15260/*.genes.results -s 15261/*.genes.results -s 15262/*.genes.results -s 15263/*.genes.results \
        -s 15264/*.genes.results -s 15265/*.genes.results -s 15266/*.genes.results -s 15267/*.genes.results \
        -s 15268/*.genes.results -s 15269/*.genes.results -s 15270/*.genes.results -s 15271/*.genes.results 

#+END_SRC


** Example tube_likelihood output

#+NAME: 
#+RESULTS:
|      run_name |        run_LR | like_non_run |     like_run |      like_tot | psmc_non_run | psmc_run | psmc_tot | tube_type |     vchi |     vadj |
|         15300 |  8.620143e+00 | -9892.858529 |  -288.119896 | -10185.288496 |         0.12 |     0.26 |     0.13 | pool      | 0.003325 | 0.126337 |
|         15266 |  7.379936e+00 | -9903.514727 |  -278.083801 | -10185.288496 |         0.13 |     0.07 |     0.13 | single    | 0.006596 | 0.250631 |
|         15303 |  5.926962e+00 | -9903.678966 |  -278.646049 | -10185.288496 |         0.13 |     0.07 |     0.13 | pool      | 0.014911 | 0.566615 |
|         15288 |  5.073024e+00 | -9899.838273 |  -282.913711 | -10185.288496 |         0.13 |     0.08 |     0.13 | pool      | 0.024301 | 0.923436 |
|         15257 |  3.913111e+00 | -9912.160037 |  -271.171904 | -10185.288496 |         0.13 |     0.08 |     0.13 | single    | 0.047911 |      1.0 |
|         15267 |  2.175992e+00 | -9917.682387 |  -266.518114 | -10185.288496 |         0.13 |     0.08 |     0.13 | single    | 0.140179 |      1.0 |
|         15259 |  2.061561e+00 | -9908.010262 |  -276.247453 | -10185.288496 |         0.13 |     0.19 |     0.13 | single    | 0.151055 |      1.0 |
|         15295 |  2.056197e+00 |  -9905.90612 |  -278.354278 | -10185.288496 |         0.13 |     0.19 |     0.13 | pool      | 0.151588 |      1.0 |
|         15294 |  2.034481e+00 | -9901.395827 |  -282.875428 | -10185.288496 |         0.13 |     0.09 |     0.13 | pool      | 0.153767 |      1.0 |
|         15260 |  1.823201e+00 | -9910.354266 |  -274.022629 | -10185.288496 |         0.13 |     0.09 |     0.13 | single    | 0.176933 |      1.0 |
|         15355 |  1.548666e+00 | -9911.776724 |  -272.737439 | -10185.288496 |         0.13 |     0.18 |     0.13 | pool      | 0.213332 |      1.0 |
|         15296 |  1.514138e+00 | -9914.582284 |  -269.949143 | -10185.288496 |         0.13 |     0.19 |     0.13 | pool      | 0.218509 |      1.0 |
| pool_v_single |  1.386516e+00 | -5467.726525 | -4716.868713 | -10185.288496 |         0.12 |     0.13 |     0.13 | None      | 0.238994 |      1.0 |
|         15293 |  1.239416e+00 | -9912.881494 |  -271.787294 | -10185.288496 |         0.13 |     0.18 |     0.13 | pool      | 0.265584 |      1.0 |
|         15265 |  1.051717e+00 | -9913.674723 |  -271.087914 | -10185.288496 |         0.13 |      0.1 |     0.13 | single    | 0.305112 |      1.0 |
|         15292 |  8.297022e-01 | -9912.380391 |  -272.493254 | -10185.288496 |         0.13 |     0.17 |     0.13 | pool      | 0.362359 |      1.0 |
|         15271 |  8.297022e-01 | -9912.380391 |  -272.493254 | -10185.288496 |         0.13 |     0.17 |     0.13 | single    | 0.362359 |      1.0 |
|         15301 |  5.923577e-01 | -9902.083673 |  -282.908644 | -10185.288496 |         0.13 |     0.16 |     0.13 | pool      | 0.441509 |      1.0 |
|         15262 |  5.253156e-01 | -9915.453179 |  -269.572659 | -10185.288496 |         0.13 |     0.16 |     0.13 | single    | 0.468583 |      1.0 |
|         15258 |  5.178381e-01 | -9915.116753 |  -269.912824 | -10185.288496 |         0.13 |     0.11 |     0.13 | single    | 0.471765 |      1.0 |
|         15297 |  4.715425e-01 | -9915.251411 |  -269.801314 | -10185.288496 |         0.13 |     0.11 |     0.13 | pool      | 0.492278 |      1.0 |
|         15268 |  4.656343e-01 | -9916.776653 |  -268.279026 | -10185.288496 |         0.13 |     0.16 |     0.13 | single    | 0.495002 |      1.0 |
|         15261 |  4.060185e-01 |  -9915.96264 |  -269.122847 | -10185.288496 |         0.13 |     0.16 |     0.13 | single    | 0.523997 |      1.0 |
|         15289 |  3.936856e-01 | -9912.671412 |  -272.420241 | -10185.288496 |         0.13 |     0.11 |     0.13 | pool      | 0.530368 |      1.0 |
|         15291 |  3.197048e-01 | -9902.870459 |  -282.258185 | -10185.288496 |         0.13 |     0.15 |     0.13 | pool      | 0.571785 |      1.0 |
|         15299 |  2.345830e-01 |  -9910.01124 |  -275.159965 | -10185.288496 |         0.13 |     0.11 |     0.13 | pool      | 0.628146 |      1.0 |
|         15270 |  2.150152e-01 | -9908.495615 |  -276.685373 | -10185.288496 |         0.13 |     0.15 |     0.13 | single    | 0.642865 |      1.0 |
|         15302 |  1.795667e-01 | -9910.449597 |  -274.749116 | -10185.288496 |         0.13 |     0.15 |     0.13 | pool      | 0.671746 |      1.0 |
|         15350 |  1.490297e-01 |  -9907.29747 |  -277.916511 | -10185.288496 |         0.13 |     0.12 |     0.13 | single    | 0.699464 |      1.0 |
|         15256 |  1.419909e-01 | -9913.895625 |  -271.321876 | -10185.288496 |         0.13 |     0.12 |     0.13 | single    |  0.70631 |      1.0 |
|         15348 |  1.360520e-01 | -9909.450949 |  -275.769522 | -10185.288496 |         0.13 |     0.14 |     0.13 | single    | 0.712238 |      1.0 |
|         15264 |  1.243139e-01 | -9910.933034 |  -274.293305 | -10185.288496 |         0.13 |     0.14 |     0.13 | single    | 0.724402 |      1.0 |
|         15269 |  1.072281e-01 | -9907.510232 |   -277.72465 | -10185.288496 |         0.13 |     0.12 |     0.13 | single    | 0.743322 |      1.0 |
|         15298 |  9.206400e-02 | -9907.969217 |  -277.273247 | -10185.288496 |         0.13 |     0.14 |     0.13 | pool      | 0.761569 |      1.0 |
|         15349 |  1.999646e-03 | -9913.946743 |  -271.340753 | -10185.288496 |         0.13 |     0.14 |     0.13 | single    | 0.964333 |      1.0 |
|         15290 |  1.134654e-03 | -9916.065205 |  -269.222724 | -10185.288496 |         0.13 |     0.14 |     0.13 | pool      | 0.973129 |      1.0 |
|         15263 | -7.275958e-12 |  -9913.79306 |  -271.495436 | -10185.288496 |         0.13 |     0.13 |     0.13 | single    |      1.0 |      1.0 |
|         15351 | -7.275958e-12 | -9910.941393 |  -274.347103 | -10185.288496 |         0.13 |     0.13 |     0.13 | single    |      1.0 |      1.0 |

* gene_spike_ratio

One quality check is to make sure the fraction of spikes detected is
about the same between the various libraries.

** From a combined quantification file

#+BEGIN_SRC bash

python3 gene_spike_ratio.py -c gspikein.txt -s , \
  --combined-pool ../single-cell/Mm_purkinje_poolsplit_expected_count.csv \
  --combined-single ../single-cell/Mm_purkinje_single_expected_count.csv 

#+END_SRC

If you have raw RSEM files. It defaults to FPKMs but you can pick
anther quantification column with --quantification-name

#+BEGIN_SRC bash

 python3 gene_spike_ratio.py -c gspikein.txt \
  --rsem 15288/*.genes.results --rsem-library 15288 --pool 15288 \
  --rsem 15289/*.genes.results --rsem-library 15259 --pool 15259 \
  --rsem 15290/*.genes.results --rsem-library 15290 --pool 15290 \
  --rsem 15300/*.genes.results --rsem-library 15300 --single 15300 \
  --rsem 15301/*.genes.results --rsem-library 15301 --single 15301 \

#+END_SRC

In this example the libraries all performed fairly well. Though
obviously the single cell samples have a greater variance than the
pool-split samples.

** From RSEM files

#+BEGIN_EXAMPLE
python3 ../single-cell-qc/gene_spike_ratio.py \
  -c ../single-cell-qc/gspikeins.txt \
  --rsem barbara-wold\:15288/*.genes.results --rsem-library 15288 --pool 15288  \
  --rsem barbara-wold\:15289/*.genes.results --rsem-library 15289 --pool 15289  \
  --rsem barbara-wold\:15290/*.genes.results --rsem-library 15290 --pool 15290  \
  --rsem barbara-wold\:15256/*.genes.results --rsem-library 15256 --single 15256 \
  --rsem barbara-wold\:15257/*.genes.results --rsem-library 15257 --single 15257 \
  --rsem barbara-wold\:15258/*.genes.results --rsem-library 15258 --single 15258
#+END_EXAMPLE

** Example gene spike ratio output

Note: this probably could be improved, as it prints the table,
then the summary statistics.

#+BEGIN_EXAMPLE
          gene_sum  spike_sum     ratio tube_type
15288   8007835.99    24029.0  0.299171      pool
15289   7573788.99    21519.0  0.283320      pool
15290  10253851.01    32221.0  0.313249      pool
15291   8075206.97    25752.0  0.317888      pool
15292   9423580.00    25324.0  0.268010      pool
15293   8166065.99    25211.0  0.307779      pool
15294   7365557.99    19058.0  0.258077      pool
15295   8513845.99    26058.0  0.305132      pool
15296   9474148.98    29624.0  0.311708      pool
15297   8580631.02    30362.0  0.352596      pool
15298   8436573.00    25160.0  0.297339      pool
15299   7817540.01    24306.0  0.309953      pool
15300   9420491.99    30541.0  0.323150      pool
15301   9037358.98    25676.0  0.283305      pool
15302   8321276.00    27618.0  0.330798      pool
15303   7580422.99    18151.0  0.238874      pool
15256   7506316.02    13603.0  0.180893    single
15257   6492248.00    28751.0  0.440899    single
15258   8986646.00    39870.0  0.441699    single
15259   8760446.99    32586.0  0.370589    single
15260   6773336.99    31377.0  0.461107    single
15261   7012480.00    19957.0  0.283785    single
15262   8192924.02    18578.0  0.226244    single
15263   8250797.00    25454.0  0.307555    single
15264   8730678.01    19724.0  0.225407    single
15265   6344249.00    17296.0  0.271884    single
15266   7294383.99    13502.0  0.184759    single
15267   7165140.01    24432.0  0.339826    single
15268   6932319.99    19464.0  0.279986    single
15269   7211879.99    12975.0  0.179588    single
15270   7605850.00    26112.0  0.342140    single
15271   8067254.00    21972.0  0.271621    single
Pool-split: mean 0.3 stdev 0.0285
Single: mean 0.3 stdev 0.0929
Ttest_indResult(statistic=-0.019634268334951181, pvalue=0.98455366373459352)
#+END_EXAMPLE

* Running tests

To run the tests you need R installed which obviously is not going to
be handled by the Python dependency handling.

The initial prototype used R and to make sure the Python version
implemented the same algorithm the test code runs the same data
through both versions and compares the results.
